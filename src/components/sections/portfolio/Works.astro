---
import works from "../../../data/works.json";
import { SlidersHorizontal, ChevronDown, X, FilterX, ExternalLink } from "@lucide/astro";
---

<!-- Backdrop overlay for blur effect -->
<div
  id="backdrop-overlay"
  class="fixed inset-0 bg-black/5 backdrop-blur-lg z-20 hidden transition-all duration-300 opacity-0"
>
</div>

<!-- Filtro Modal Backdrop -->
<div
  id="article-modal-backdrop"
  class="fixed inset-0 bg-black/40 backdrop-blur-sm z-50 hidden transition-all duration-300 opacity-0"
>
</div>

<!-- Modal para mostrar características del artículo -->
<div
  id="article-modal"
  class="fixed inset-0 z-50 flex items-center justify-center p-4 hidden"
>
  <div
    class="bg-white rounded-2xl shadow-xl p-6 w-full max-w-md mx-auto transition-all duration-300 opacity-0 translate-y-4"
  >
    <div class="flex justify-between items-center mb-4">
      <h3 id="article-modal-title" class="font-bold text-xl"></h3>
      <button id="close-article-modal" class="p-1.5 hover:bg-gray-100 rounded-lg transition-colors">
        <X class="w-5 h-5" />
      </button>
    </div>
    
    <div class="space-y-4">
      <img
        id="article-modal-image"
        src=""
        alt=""
        class="w-full h-48 object-cover rounded-xl border border-black mb-4"
      />
      
      <div>
        <h4 class="font-semibold text-lg mb-2">Características</h4>
        <ul id="article-modal-characteristics" class="list-disc pl-5 space-y-1 text-gray-700"></ul>
      </div>
      
      <div class="flex justify-end mt-6">
        <a
          id="article-modal-link"
          href=""
          target="_blank"
          rel="noopener noreferrer"
          class="flex items-center gap-2 bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90 transition-all duration-200"
        >
          <span>Ver sitio web</span>
          <ExternalLink class="w-4 h-4" />
        </a>
      </div>
    </div>
  </div>
</div>

<!-- Botón de filtrado - Adaptado para móvil -->
<div class="absolute right-0 z-30 px-4 sm:px-8">
  <div class="relative">
    <!-- Botón de filtrado -->
    <button
      id="filter-button"
      class="flex items-center gap-2 rounded-xl px-3 py-2 text-sm shadow-lg bg-primary text-white transition-all duration-200 hover:bg-primary/90"
    >
      <SlidersHorizontal class="w-4 h-4 text-white/80" />
      <span id="filter-text" class="font-medium">Filtrar</span>
      <ChevronDown
        id="arrow-icon"
        class="w-4 h-4 text-white/80 transition-transform duration-300"
      />
    </button>

    <!-- Modal - Adaptado para móvil -->
    <div
      id="filter-modal"
      class="fixed sm:absolute inset-x-0 sm:inset-auto bottom-0 sm:top-full sm:right-0 hidden z-20"
    >
      <div
        class="bg-white rounded-t-xl sm:rounded-xl shadow-xl p-4 w-full sm:w-64 transition-all duration-300 opacity-0 translate-y-2 mx-auto sm:mx-0 max-w-screen-sm"
      >
        <div class="flex justify-between items-center mb-4">
          <h3 class="font-semibold text-lg">Filtrar por</h3>
          <button id="close-modal" class="p-1 hover:bg-gray-100 rounded-lg">
            <X class="w-5 h-5" />
          </button>
        </div>
        <div class="space-y-2">
          <button
            data-type="all"
            data-label="Filtrar"
            class="filter-option w-full text-left px-3 py-3 sm:py-2 rounded-lg hover:bg-primary/10 transition-colors"
          >
            Todos
          </button>
          <button
            data-type="landing"
            data-label="Landing"
            class="filter-option w-full text-left px-3 py-3 sm:py-2 rounded-lg hover:bg-primary/10 transition-colors"
          >
            Landing
          </button>
          <button
            data-type="ecommerce"
            data-label="E-commerce"
            class="filter-option w-full text-left px-3 py-3 sm:py-2 rounded-lg hover:bg-primary/10 transition-colors"
          >
            E-commerce
          </button>
          <button
            data-type="corporative"
            data-label="Corporativo"
            class="filter-option w-full text-left px-3 py-3 sm:py-2 rounded-lg hover:bg-primary/10 transition-colors"
          >
            Corporativo
          </button>
          <button
            data-type="blog"
            data-label="Blog"
            class="filter-option w-full text-left px-3 py-3 sm:py-2 rounded-lg hover:bg-primary/10 transition-colors"
          >
            Blog
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Botón para borrar filtros -->
<div
  id="clear-filter-container"
  class="fixed bottom-4 inset-x-0 flex justify-center z-10 transition-all duration-300 opacity-0 translate-y-4 hidden"
>
  <button
    id="clear-filter-button"
    class="flex items-center gap-2 rounded-full px-4 py-2 bg-primary text-white shadow-lg hover:bg-primary/80 transition-all duration-300"
  >
    <FilterX class="w-4 h-4" />
    <span>Borrar filtros</span>
  </button>
</div>

<!-- Listado de trabajos -->
<div class="flex flex-wrap justify-center gap-8 mt-20 px-8 pb-20">
  {
    works.map((example) => (
      <article
        id={example.id}
        data-type={example.type}
        data-href={example.href}
        data-title={example.title || example.title}
        class="bg-white rounded-2xl shadow-lg p-4 w-80 flex flex-col border-2 border-black transition-all duration-300 hover:scale-102 relative group cursor-pointer"
      >
        <span
          class={`absolute z-10 top-2 right-2 ${example.badgeColor} text-white text-xs font-semibold px-2 py-1 rounded-full shadow transition-colors duration-200`}
        >
          {example.badge}
        </span>
        <img
          src={example.src}
          alt={example.alt}
          class="w-full h-60 object-cover rounded-xl border border-black mb-4 group-hover:brightness-105 transition-all duration-300"
          loading="lazy"
        />
        <p class="text-sm text-gray-700">{example.title}</p>
        <p class="text-sm mt-2 text-gray-500">{example.text}</p>
      </article>
    ))
  }
</div>

<div id="no-results" class="hidden text-center">
  <p class="text-xl text-primary">No se encontraron páginas para este filtro.</p>
</div>

<script>
  // Elementos del DOM
  const filterButton = document.getElementById("filter-button") as HTMLElement;
  const filterModal = document.getElementById("filter-modal") as HTMLElement;
  const closeButton = document.getElementById("close-modal") as HTMLElement;
  const modalContent = filterModal.querySelector("div") as HTMLElement;
  const arrow = document.getElementById("arrow-icon") as HTMLElement;
  const filterOptions = document.querySelectorAll<HTMLElement>(".filter-option");
  const backdropOverlay = document.getElementById("backdrop-overlay") as HTMLElement;
  const clearFilterContainer = document.getElementById("clear-filter-container") as HTMLElement;
  const clearFilterButton = document.getElementById("clear-filter-button") as HTMLElement;
  const filterText = document.getElementById("filter-text") as HTMLElement;
  
  // Elementos del modal de artículo
  const articleModal = document.getElementById("article-modal") as HTMLElement;
  const articleModalBackdrop = document.getElementById("article-modal-backdrop") as HTMLElement;
  const closeArticleModal = document.getElementById("close-article-modal") as HTMLElement;
  const articleModalContent = articleModal.querySelector("div") as HTMLElement;
  const articleModalTitle = document.getElementById("article-modal-title") as HTMLElement;
  const articleModalImage = document.getElementById("article-modal-image") as HTMLImageElement;
  const articleModalCharacteristics = document.getElementById("article-modal-characteristics") as HTMLElement;
  const articleModalLink = document.getElementById("article-modal-link") as HTMLAnchorElement;

  // Importar los trabajos para acceder a sus características
  import works from "../../../data/works.json";

  let isOpen = false;
  // Obtener el filtro guardado de localStorage o usar "all" por defecto
  let selectedFilter = localStorage.getItem("selectedFilter") || "all";

  // Aplicar el filtro al cargar la página
  const applyFilter = (filter = selectedFilter) => {
    selectedFilter = filter;
    
    // Guardar en localStorage
    localStorage.setItem("selectedFilter", selectedFilter);
    
    // Marcar la opción seleccionada
    filterOptions.forEach((opt: HTMLElement) => {
      opt.classList.remove("bg-primary/20");
      if (opt.dataset.type === selectedFilter) {
        opt.classList.add("bg-primary/20");
        
        // Actualizar el texto del botón de filtrado si no es "all"
        if (selectedFilter !== "all") {
          filterText.textContent = opt.dataset.label || "Filtrar";
        } else {
          filterText.textContent = "Filtrar";
        }
      }
    });

    // Filtrar los artículos
    const articles = document.querySelectorAll("article[data-type]");
    articles.forEach((article) => {
      const shouldShow =
        selectedFilter === "all" || (article as HTMLElement).dataset.type === selectedFilter;
      article.classList.toggle("hidden", !shouldShow);
      if (shouldShow) article.classList.add("animate-fade-in");
    });

    // Mostrar u ocultar el mensaje "no resultados"
    const noResults = document.getElementById("no-results");
    // Convertimos NodeList a array para usar every
    const allHidden = Array.from(articles).every((article) =>
      article.classList.contains("hidden"),
    );
    if (allHidden) {
      noResults.classList.remove("hidden");
    } else {
      noResults.classList.add("hidden");
    }

    // Mostrar botón de borrar filtros si es necesario
    showClearFilterButton();
  };

  // Toggle modal de filtros
  const toggleModal = () => {
    isOpen = !isOpen;
    filterModal.classList.toggle("hidden");
    arrow.classList.toggle("rotate-180");

    // Toggle backdrop with blur effect
    backdropOverlay.classList.toggle("hidden");

    if (isOpen) {
      // Prevenir scroll en el body cuando el modal está abierto
      document.body.style.overflow = "hidden";

      setTimeout(() => {
        modalContent.classList.remove("opacity-0", "translate-y-2");
        modalContent.classList.add("opacity-100", "translate-y-0");
        backdropOverlay.classList.remove("opacity-0");
        backdropOverlay.classList.add("opacity-100");
      }, 10);
    } else {
      // Restaurar scroll
      document.body.style.overflow = "";

      modalContent.classList.remove("opacity-100", "translate-y-0");
      modalContent.classList.add("opacity-0", "translate-y-2");
      backdropOverlay.classList.remove("opacity-100");
      backdropOverlay.classList.add("opacity-0");
    }
  };

  // Mostrar botón de borrar filtros
  const showClearFilterButton = () => {
    if (selectedFilter !== "all") {
      clearFilterContainer.classList.remove("hidden");
      setTimeout(() => {
        clearFilterContainer.classList.remove("opacity-0", "translate-y-4");
        clearFilterContainer.classList.add("opacity-100", "translate-y-0");
      }, 10);
    } else {
      clearFilterContainer.classList.add("opacity-0", "translate-y-4");
      setTimeout(() => {
        clearFilterContainer.classList.add("hidden");
      }, 300);
    }
  };

  // Borrar filtros
  const clearFilters = () => {
    selectedFilter = "all";
    localStorage.removeItem("selectedFilter");
    filterText.textContent = "Filtrar";
    
    applyFilter("all");
  };

  // Abrir modal de artículo
  const openArticleModal = (articleId: string) => {
    // Buscar el trabajo por ID
    const work = works.find(w => w.id === articleId);
    
    if (!work) return;
    
    // Llenar el modal con la información
    articleModalTitle.textContent = work.title || work.title;
    articleModalImage.src = work.src;
    articleModalImage.alt = work.alt;
    articleModalLink.href = work.href;
    
    // Mostrar las características
    articleModalCharacteristics.innerHTML = '';
    if (work.characteristics && Array.isArray(work.characteristics)) {
      work.characteristics.forEach(characteristic => {
        const li = document.createElement('li');
        li.textContent = characteristic;
        articleModalCharacteristics.appendChild(li);
      });
    } else {
      const li = document.createElement('li');
      li.textContent = 'No hay características disponibles';
      articleModalCharacteristics.appendChild(li);
    }
    
    // Mostrar el modal
    articleModal.classList.remove("hidden");
    articleModalBackdrop.classList.remove("hidden");
    
    // Prevenir scroll
    document.body.style.overflow = "hidden";
    
    // Animar entrada
    setTimeout(() => {
      articleModalContent.classList.remove("opacity-0", "translate-y-4");
      articleModalContent.classList.add("opacity-100", "translate-y-0");
      articleModalBackdrop.classList.remove("opacity-0");
      articleModalBackdrop.classList.add("opacity-100");
    }, 10);
  };

  // Cerrar modal de artículo
  const closeArticleModalFunc = () => {
    // Animar salida
    articleModalContent.classList.remove("opacity-100", "translate-y-0");
    articleModalContent.classList.add("opacity-0", "translate-y-4");
    articleModalBackdrop.classList.remove("opacity-100");
    articleModalBackdrop.classList.add("opacity-0");
    
    // Restaurar scroll
    document.body.style.overflow = "";
    
    // Ocultar después de la animación
    setTimeout(() => {
      articleModal.classList.add("hidden");
      articleModalBackdrop.classList.add("hidden");
    }, 300);
  };

  // Event listeners
  filterButton.addEventListener("click", toggleModal);
  closeButton.addEventListener("click", toggleModal);
  backdropOverlay.addEventListener("click", toggleModal);
  clearFilterButton.addEventListener("click", clearFilters);
  
  // Event listeners para el modal de artículo
  closeArticleModal.addEventListener("click", closeArticleModalFunc);
  articleModalBackdrop.addEventListener("click", closeArticleModalFunc);
  
  // Cerrar el modal al hacer clic fuera del contenido
  articleModal.addEventListener("click", (e) => {
    if (e.target === articleModal) {
      closeArticleModalFunc();
    }
  });

  // Cerrar al hacer click fuera
  filterModal.addEventListener("click", (e) => {
    if (e.target === filterModal) toggleModal();
  });

  // Filtrado
  filterOptions.forEach((option) => {
    option.addEventListener("click", () => {
      const filterType = option.dataset.type;
      applyFilter(filterType);
      toggleModal();
    });
  });
  
  // Añadir evento click a los artículos para abrir el modal
  document.querySelectorAll("article[data-type]").forEach((article) => {
    article.addEventListener("click", () => {
      openArticleModal((article as HTMLElement).id);
    });
  });

  // Animación inicial
  document.querySelectorAll("[data-type]").forEach((article) => {
    article.classList.add("animate-fade-in");
  });

  // Aplicar el filtro guardado al cargar la página
  document.addEventListener("DOMContentLoaded", () => {
    applyFilter();
  });
</script>

<style>
  .animate-fade-in {
    animation: fadeIn 0.3s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>